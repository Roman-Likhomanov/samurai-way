{"version":3,"file":"static/js/294.a396c7e5.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAkH,iCAAlH,EAA8J,0BAA9J,EAAqM,4BCArM,GAAgB,KAAO,2B,6BCiBvB,EAZ+C,SAACA,GAC5C,IAAIC,EAAO,YAAcD,EAAME,GAI/B,OACI,iBAAKC,UAAWC,EAAAA,KAAhB,WACI,gBAAKC,IAAKC,KACV,SAAC,KAAD,CAASC,GAAIN,EAAME,UANZ,WACX,OAAOH,EAAME,KAAOD,EAAKA,EAAKO,QAAvB,UAAoCJ,EAAAA,KAApC,YAA8CA,EAAAA,QAA9C,UAA8DA,EAAAA,OAKjE,SAAyCJ,EAAMS,WCb3D,EAA0B,yBAA1B,EAA0D,sBCU1D,EANuC,SAACT,GACpC,OAAO,iBAAKG,UAAWC,EAAhB,WACH,gBAAKC,IAAKC,KACd,gBAAKH,UAAWC,EAAhB,SAAyBJ,EAAMU,c,uCCsC/BC,GAAcC,EAAAA,EAAAA,GAAiB,IAY7BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAVsC,SAACd,GAC/D,OACI,kBAAMG,UAAWC,EAAcY,SAAUhB,EAAMiB,aAA/C,WACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUX,KAAK,iBAC1BY,SAAU,CAACC,EAAAA,EAAUX,MAC5B,2CAOZ,EAxC4C,SAACX,GAEzC,IAAIuB,EAAQvB,EAAMwB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAanB,KAAMmB,EAAEnB,KAAMP,GAAI0B,EAAE1B,IAAS0B,EAAE1B,OACrF2B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAASrB,QAASqB,EAAErB,QAASR,GAAI6B,EAAE7B,IAAS6B,EAAE7B,OAM7F,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKqB,KAEL,iBAAKtB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKyB,KAEL,SAAChB,EAAD,CAAqBG,SAbb,SAACgB,GACjBhC,EAAMiC,YAAYD,EAASE,0B,mBCAnC,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAfkB,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACa,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,IAAcJ,SAO/BK,EAAAA,EAFJ,CAGEC,I,gICtBEC,EAA6B,SAAClB,GAAD,MAA8C,CAC3EmB,OAAQnB,EAAMoB,KAAKD,SAGhB,SAASH,EAAoBK,GAOhC,OAAOR,EAAAA,EAAAA,IAAQK,EAARL,EANP,SAA2BpC,GACvB,IAAK0C,EAAwB1C,EAAxB0C,OAAWG,GAAhB,OAA6B7C,EAA7B,GACA,OAAK0C,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUtC,GAAG","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/DialogsItem/DialogsItem.module.css?e982","components/Dialogs/DialogsItem/DialogsItem.tsx","webpack://samurai-way/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__HSiZ-\",\"dialogsItems\":\"Dialogs_dialogsItems__Ne4Rx\",\"messagesWrapper\":\"Dialogs_messagesWrapper__s4LLu\",\"messages\":\"Dialogs_messages__e3uDF\",\"newMessage\":\"Dialogs_newMessage__+0FbI\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"DialogsItem_item__dIQvN\"};","import React from 'react';\r\nimport s from './DialogsItem.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {DialogsItemType} from '../../../redux/types';\r\nimport avatar from '../../../assets/images/avatar.png'\r\n\r\nconst DialogsItem: React.FC<DialogsItemType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    let isActive = () => {\r\n        return props.id === path[path.length] ? `${s.link} ${s.active}` : `${s.link}`;\r\n    }\r\n    return (\r\n        <div className={s.item}>\r\n            <img src={avatar}/>\r\n            <NavLink to={path} className={isActive}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogsItem;","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__d25-4\",\"text\":\"Message_text__KTbCy\"};","import React from 'react';\r\nimport s from './Message.module.css';\r\nimport {MessageType} from '../../../redux/types';\r\nimport avatar from '../../../assets/images/avatar.png'\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={s.message}>\r\n        <img src={avatar}/>\r\n    <div className={s.text}>{props.message}</div>\r\n    </div>\r\n}\r\nexport default Message;","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogsItem from './DialogsItem/DialogsItem';\r\nimport Message from './Message/Message'\r\nimport {DialogsPageType} from '../../redux/types';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\n\r\ntype DialogsPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogsItem name={d.name} id={d.id} key={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} id={m.id} key={m.id}/>)\r\n\r\n    let addNewMessage = (formData: FormDataType) => {\r\n        props.sendMessage(formData.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messagesWrapper}>\r\n                <div className={s.messages}>\r\n                    {messagesElements}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form className={s.newMessage} onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name=\"newMessageBody\"\r\n                   validate={[required, maxLength50]}/>\r\n            <button>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {RootStateType} from '../../redux/types';\r\nimport {sendMessageTC} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\nimport {ActionsType, AppStateType} from '../../redux/redux-store';\r\n\r\ntype mapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:ThunkDispatch<AppStateType, unknown, ActionsType>):mapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string)=>{\r\n            dispatch(sendMessageTC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)","import {Redirect} from 'react-router-dom';\r\nimport React, {ComponentType} from 'react';\r\nimport {RootStateType} from '../redux/types';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n"],"names":["props","path","id","className","s","src","avatar","to","length","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","formData","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageTC","WithAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}