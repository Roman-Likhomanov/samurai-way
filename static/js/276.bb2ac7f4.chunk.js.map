{"version":3,"file":"static/js/276.bb2ac7f4.chunk.js","mappings":"yKACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,mBCY5I,EAR+C,SAACA,GAC5C,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCFtC,EAHuC,SAACN,GACpC,OAAO,gBAAKG,UAAWC,EAAAA,QAAhB,SAA4BJ,EAAMO,W,uCCuCzCC,GAAcC,EAAAA,EAAAA,GAAiB,IAgB7BC,GAAsBC,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAdsC,SAACX,GAC/D,OACI,iBAAMa,SAAUb,EAAMc,aAAtB,UACI,4BACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUX,KAAK,iBAAiBY,YAAY,qBACvDC,SAAU,CAACC,EAAAA,EAAUZ,QAEhC,6CAQhB,EA1C4C,SAACR,GAEzC,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAapB,KAAMoB,EAAEpB,KAAMJ,GAAIwB,EAAExB,IAASwB,EAAExB,OACrFyB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAASL,GAAI2B,EAAE3B,IAAS2B,EAAE3B,OAM7F,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACKmB,KAEL,gBAAKpB,UAAWC,EAAAA,SAAhB,UACI,yBAAMuB,OAEV,SAACjB,EAAD,CAAqBG,SAZT,SAACiB,GACjB9B,EAAM+B,YAAYD,EAASE,uB,mBCLnC,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAfkB,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACa,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,GAAmBJ,SAOpCK,EAAAA,EAFJ,CAGEC,I,gICjBEC,EAA6B,SAAClB,GAAD,MAA8C,CAC3EmB,OAAQnB,EAAMoB,KAAKD,SAGhB,SAASH,EAAoBK,GAOhC,OAAOR,EAAAA,EAAAA,IAAQK,EAARL,EANP,SAA2BlC,GACvB,IAAKwC,EAAwBxC,EAAxBwC,OAAWG,GAAhB,OAA6B3C,EAA7B,GACA,OAAKwC,GACE,SAACE,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUtC,GAAG","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__HSiZ-\",\"dialogsItems\":\"Dialogs_dialogsItems__Ne4Rx\",\"active\":\"Dialogs_active__2tWIp\",\"messages\":\"Dialogs_messages__e3uDF\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {DialogsItemType} from '../../../redux/types';\r\n\r\nconst DialogsItem: React.FC<DialogsItemType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogsItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {MessageType} from '../../../redux/types';\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\nexport default Message;","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogsItem from './DialogsItem/DialogsItem';\r\nimport Message from './Message/Message'\r\nimport {DialogsPageType} from '../../redux/types';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\n\r\ntype DialogsPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: DialogsPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody:string\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogsItem name={d.name} id={d.id} key={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} id={m.id} key={m.id}/>)\r\n\r\n    let addNewMessage = (formData: FormDataType) => {\r\n        props.sendMessage(formData.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    <Field component={Textarea} name=\"newMessageBody\" placeholder=\"Enter your message\"\r\n                           validate={[required, maxLength50]}/>\r\n                </div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {RootStateType} from '../../redux/types';\r\nimport {DialogsActionType, sendMessageCreator} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:(action: DialogsActionType) => void) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string)=>{\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)","import {Redirect} from 'react-router-dom';\r\nimport React, {ComponentType} from 'react';\r\nimport {RootStateType} from '../redux/types';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to=\"/login\"/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n"],"names":["props","path","id","className","s","to","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","formData","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","WithAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","restProps"],"sourceRoot":""}